/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,15],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,24],$Vb=[1,23],$Vc=[1,38],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,7],$Vi=[1,8],$Vj=[2,5,30,35,36,37,38,39,46,48,51,57,59,67,69,72,74,76,78,80,82,87,88],$Vk=[1,51],$Vl=[1,61],$Vm=[1,60],$Vn=[1,58],$Vo=[1,59],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,76],$Vx=[42,43,84],$Vy=[2,39],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,43,75,84],$VO=[1,126],$VP=[23,43],$VQ=[2,5,30,35,36,37,38,39,46,48,51,57,59,66,67,69,72,74,76,78,80,82,87,88],$VR=[1,164],$VS=[7,8,13,14,15,16,17,18,19,20,23,43,75,84],$VT=[7,8,9,10,11,13,14,15,16,17,18,19,20,23,43,75,84],$VU=[13,14,15,16,17,18,19,20,23,43,75,84],$VV=[15,16,19,20,23,43,75,84],$VW=[1,185],$VX=[1,186],$VY=[72,74,76];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"S":3,"L_INS":4,"EOF":5,"E":6,"suma":7,"resta":8,"multiplicacion":9,"division":10,"modulo":11,"pow":12,"mayorigual":13,"menorigual":14,"distinto":15,"comparacion":16,"menor":17,"mayor":18,"and":19,"or":20,"not":21,"para":22,"parc":23,"entero":24,"doble":25,"caracter":26,"cadena":27,"rtrue":28,"rfalse":29,"identificador":30,"incremento":31,"decremento":32,"L_ARGUMENTOS":33,"T":34,"rint":35,"rdouble":36,"rstring":37,"rboolean":38,"rchar":39,"DECLARACION":40,"LISTA_ID":41,"igual":42,"coma":43,"ASIGNACION":44,"SENTENCIA_IMPORT":45,"timport":46,"SENTENCIA_CLASE":47,"tclass":48,"BLOQUE":49,"SENTENCIA_METODO":50,"tvoid":51,"L_PARAMETROS":52,"SENTENCIA_FUNCION":53,"PARAMETRO":54,"SENTENCIA_LLAMADA":55,"SENTENCIA_RETURN":56,"treturn":57,"IMPRIMIR":58,"tsystem":59,"punto":60,"tout":61,"tprint":62,"tprintln":63,"SENTENCIA_IF":64,"L_CONDICIONES":65,"telse":66,"tif":67,"SENTENCIA_SWITCH":68,"tswitch":69,"llavea":70,"L_CASOS":71,"llavec":72,"CASO":73,"tcase":74,"dospuntos":75,"tdefault":76,"SENTENCIA_WHILE":77,"twhile":78,"SENTENCIA_DOWHILE":79,"tdo":80,"SENTENCIA_FOR":81,"tfor":82,"INICIO_FOR":83,"puntocoma":84,"ACTUALIZAR_FOR":85,"INS":86,"tbreak":87,"tcontinue":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"suma",8:"resta",9:"multiplicacion",10:"division",11:"modulo",12:"pow",13:"mayorigual",14:"menorigual",15:"distinto",16:"comparacion",17:"menor",18:"mayor",19:"and",20:"or",21:"not",22:"para",23:"parc",24:"entero",25:"doble",26:"caracter",27:"cadena",28:"rtrue",29:"rfalse",30:"identificador",31:"incremento",32:"decremento",35:"rint",36:"rdouble",37:"rstring",38:"rboolean",39:"rchar",42:"igual",43:"coma",46:"timport",48:"tclass",51:"tvoid",57:"treturn",59:"tsystem",60:"punto",61:"tout",62:"tprint",63:"tprintln",66:"telse",67:"tif",69:"tswitch",70:"llavea",72:"llavec",74:"tcase",75:"dospuntos",76:"tdefault",78:"twhile",80:"tdo",82:"tfor",84:"puntocoma",87:"tbreak",88:"tcontinue"},
productions_: [0,[3,2],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,2],[6,3],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,4],[34,1],[34,1],[34,1],[34,1],[34,1],[40,4],[40,2],[41,3],[41,1],[44,3],[45,2],[47,3],[50,5],[50,6],[53,5],[53,6],[52,3],[52,1],[54,2],[33,3],[33,1],[55,3],[55,4],[56,2],[56,1],[58,8],[58,8],[64,3],[64,1],[65,7],[65,5],[68,7],[71,2],[71,1],[73,4],[73,3],[77,5],[79,6],[81,9],[83,1],[83,1],[85,1],[85,2],[85,2],[49,2],[49,3],[4,2],[4,1],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,1],[86,1],[86,1],[86,2],[86,3],[86,3],[86,1],[86,1],[86,1],[86,2],[86,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
                var raiz = new CNodo.Nodo("RAIZ");
                raiz.agregar($$[$0-1]);
                this.$ = raiz;
                return this.$;
            
break;
case 2:
  
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("SUMA");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 3:
  
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("RESTA");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 4:
    
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("MULTIPLICACION");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 5:
  
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("DIVISION");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 6:
  
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("MODULO");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 7:
  
                                var n = new CNodo.Nodo("ARITMETICA");
                                var n2 = new CNodo.Nodo("POTENCIA");
                                n.agregar(n2);

                                var n3 = new CNodo.Nodo("EXPRESION");
                                n3.agregar($$[$0-2]);
                                var n4 = new CNodo.Nodo("EXPRESION");
                                n4.agregar($$[$0]);

                                n2.agregar(n3);
                                n2.agregar(n4);

                                this.$ = n;
                            
break;
case 8:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("MAYOR O IGUAL");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 9:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("MENOR O IGUAL");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 10:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("DISTINTO");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 11:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("IGUALES");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 12:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("MENOR");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 13:
  
                                    var n = new CNodo.Nodo("RELACIONAL");
                                    var n2 = new CNodo.Nodo("MAYOR");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 14:
  
                                    var n = new CNodo.Nodo("LOGICA");
                                    var n2 = new CNodo.Nodo("AND");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 15:
  
                                    var n = new CNodo.Nodo("LOGICA");
                                    var n2 = new CNodo.Nodo("OR");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0-2]);
                                    var n4 = new CNodo.Nodo("EXPRESION");
                                    n4.agregar($$[$0]);

                                    n2.agregar(n3);
                                    n2.agregar(n4);

                                    this.$ = n;
                                
break;
case 16:
  
                                    var n = new CNodo.Nodo("LOGICA");
                                    var n2 = new CNodo.Nodo("NOT");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0]);

                                    n2.agregar(n3);

                                    this.$ = n;
                                
break;
case 17:
  this.$=$$[$0-1]; 
break;
case 18:
  
                                    var n = new CNodo.Nodo("ARITMETICA");
                                    var n2 = new CNodo.Nodo("MENOS UNARIO");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0]);

                                    n2.agregar(n3);

                                    this.$ = n;
                                
break;
case 19:
  
                                    var n = new CNodo.Nodo("ARITMETICA");
                                    var n2 = new CNodo.Nodo("MAS UNARIO");
                                    n.agregar(n2);

                                    var n3 = new CNodo.Nodo("EXPRESION");
                                    n3.agregar($$[$0]);

                                    n2.agregar(n3);

                                    this.$ = n;
                                
break;
case 20: case 21: case 22: case 23: case 24: case 25:
  
                                                        var n = new CNodo.Nodo("Expresion");
                                                        var n2 = new CNodo.Nodo("Primitivo");
                                                        n.agregar(n2);
                                                        this.$ = n ;  
break;
case 26:
  
                                                        var n = new CNodo.Nodo("EXPRESION");
                                                        var n2 = new CNodo.Nodo("IDENTIFICADOR");
                                                        var varia = new CNodo.Nodo($$[$0] + "");
                                                        n2.agregar(varia);
                                                        n.agregar(n2);
                                                        this.$ = n ;  
break;
case 27:
  
                                                        var n = new CNodo.Nodo("EXPRESION");
                                                        var n2 = new CNodo.Nodo("IDENTIFICADOR");
                                                        var n3 = new CNodo.Nodo("INCREMENTO");
                                                        var varia = new CNodo.Nodo($$[$0-1] + "");
                                                        n2.agregar(varia);
                                                        n.agregar(n2);
                                                        n.agregar(n3);
                                                        this.$ = n ;  
break;
case 28:
  
                                                        var n = new CNodo.Nodo("EXPRESION");
                                                        var n2 = new CNodo.Nodo("IDENTIFICADOR");
                                                        var varia = new CNodo.Nodo($$[$0-1] + "");
                                                        n2.agregar(varia);
                                                        var n3 = new CNodo.Nodo("DECREMENTO");
                                                        n.agregar(n2);
                                                        n.agregar(n3);
                                                        this.$ = n ;  
break;
case 29:
  
                                                        var n = new CNodo.Nodo("EXPRESION");
                                                        var n2 = new CNodo.Nodo("LLAMADA");
                                                        var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                        var varia = new CNodo.Nodo($$[$0-2] + "");
                                                        iden.agregar(varia);
                                                        n2.agregar(iden);
                                                        n.agregar(n2);
                                                        this.$ = n ;  
break;
case 30:
  
                                                        var n = new CNodo.Nodo("EXPRESION");
                                                        var n2 = new CNodo.Nodo("LLAMADA");
                                                        n.agregar(n2);
                                                        var n3 = new CNodo.Nodo("IDENTIFICADOR");
                                                        var n4 = new CNodo.Nodo("LISTA_ARGUMENTOS");
                                                        var varia = new CNodo.Nodo($$[$0-3] + "");
                                                        n3.agregar(varia);
                                                        n2.agregar(n3);
                                                        n2.agregar(n4);
                                                        this.$ = n ;  
break;
case 31:
  
                            var n = new CNodo.Nodo("TIPO");
                            var n2 = new CNodo.Nodo("INT");
                            n.agregar(n2);
                            tipo = "int";
                            this.$ = n;
                        
break;
case 32:
  
                            var n = new CNodo.Nodo("TIPO");
                            var n2 = new CNodo.Nodo("DOUBLE");
                            n.agregar(n2);
                            tipo = "double";
                            this.$ = n;
                        
break;
case 33:
  
                            var n = new CNodo.Nodo("TIPO");
                            var n2 = new CNodo.Nodo("STRING");
                            n.agregar(n2);
                            tipo = "string";
                            this.$ = n;
                        
break;
case 34:
  
                            var n = new CNodo.Nodo("TIPO");
                            var n2 = new CNodo.Nodo("BOOLEAN");
                            n.agregar(n2);
                            tipo = "boolean";
                            this.$ = n;
                        
break;
case 35:
  
                            var n = new CNodo.Nodo("TIPO");
                            var n2 = new CNodo.Nodo("CHAR");
                            n.agregar(n2);
                            tipo = "char";
                            this.$ = n;
                        
break;
case 36:
 
                                        var decla = new CNodo.Nodo("DECLARACION");
                                        decla.agregar($$[$0-3]);
                                        decla.agregar($$[$0-2]);
                                        decla.agregar($$[$0]);

                                        /*var listaIdentificadores = $$[$0-2];
                                        for(var i = 0; i< listaIdentificadores.getHijos().length; i++){
                                            var nombreVar = listaIdentificadores.getHijos()[i].getHijos[0].getTitulo();
                                            var varia = new CVariable.Variable(nombreVar, tipoGlobal, "", "");
                                            listaVariables.push(varia);
                                        }   */                                   

                                        this.$ = decla;
                                    
break;
case 37:
 
                                        var decla = new CNodo.Nodo("DECLARACION");
                                        decla.agregar($$[$0-1]);
                                        decla.agregar($$[$0]);

                                        var listaIdentificadores = $$[$0];
                                        for(var i = 0; i< listaIdentificadores.getHijos().length; i++){
                                            var nombreVar = listaIdentificadores.getHijos()[i].getHijos[0].getTitulo();
                                            var varia = new CVariable.Variable(nombreVar, tipoGlobal, "", "");
                                            listaVariables.push(varia);
                                        } 


                                        this.$ = decla;
                                    
break;
case 38:
 
                                            var lista = $$[$0-2];
                                            var iden = new CNodo.Nodo("IDENTIFICADOR");
                                            var varia = new CNodo.Nodo($$[$0] + "");
                                            iden.agregar(varia);
                                            lista.agregar(iden);
                                            this.$ = lista;
                                        
break;
case 39:
 
                                            var lista = new CNodo.Nodo("LISTA VARIABLES");
                                            var iden = new CNodo.Nodo("IDENTIFICADOR");
                                            var varia = new CNodo.Nodo($$[$0] + "");
                                            iden.agregar(varia);
                                            lista.agregar(iden);
                                            this.$ = lista; 
                                        
break;
case 40:
 
                                        var asigna = new CNodo.Nodo("ASIGNACION");
                                        
                                        var iden = new CNodo.Nodo("IDENTIFICADOR");
                                        var varia = new CNodo.Nodo($$[$0-2] + "");
                                        iden.agregar(varia);
                                        var expr = new CNodo.Nodo("EXPRESION");
                                        expr.agregar($$[$0]);
                                        asigna.agregar(iden);
                                        asigna.agregar(expr);

                                        this.$ = asigna;
                                    
break;
case 41:
 
                                    var imp = new CNodo.Nodo("IMPORT");
                                    var expr = new CNodo.Nodo("EXPRESION");
                                    expr.agregar($$[$0]);
                                    imp.agregar(expr);
                                    this.$ = imp;
                                
break;
case 42:

                                                        var cla = new CNodo.Nodo("CLASE");
                                                        var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                        var varia = new CNodo.Nodo($$[$0-1] + "");
                                                        iden.agregar(varia);
                                                        cla.agregar(iden);
                                                        cla.agregar($$[$0]);

                                                        /*var nombre = $$[$0-1] + "";
                                                        var tmp = new CClase.Clase(nombre);
                                                        tmp.setFunciones(listaFunciones);
                                                        listaFunciones = [];
                                                        listaClases.push(tmp);*/
                                                        this.$ = cla;
                                                    
break;
case 43:
 
                                                                var meto = new CNodo.Nodo("METODO");

                                                                var tipo = new CNodo.Nodo("TIPO");
                                                                var t = new CNodo.Nodo("VOID");
                                                                tipo.agregar(t);


                                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                                var varia = new CNodo.Nodo($$[$0-3] + "");
                                                                iden.agregar(varia);

                                                                meto.agregar(tipo);
                                                                meto.agregar(iden);
                                                                meto.agregar($$[$0]);

                                                                /*var tip = "void";
                                                                var nombre = $$[$0-3] + "";
                                                                var funci = new CFuncion.Funcion(nombre, tip, "", "");
                                                                funci.setVariables(listaVariables);
                                                                listaVariables = [];
                                                                listaFunciones.push(funci);
                                                                */

                                                                this.$ = meto;
                                                            
break;
case 44:
 
                                                                var meto = new CNodo.Nodo("METODO");

                                                                var tipo = new CNodo.Nodo("TIPO");
                                                                var t = new CNodo.Nodo("VOID");
                                                                tipo.agregar(t);

                                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                                var varia = new CNodo.Nodo($$[$0-4] + "");
                                                                iden.agregar(varia);

                                                                meto.agregar(tipo);
                                                                meto.agregar(iden);
                                                                meto.agregar($$[$0-2]);
                                                                meto.agregar($$[$0]);

                                                                var tip = "void";
                                                                var nombre = $$[$0-4] + "";

                                                                var listaParametros = [];
                                                                var nodoListaParametros = $$[$0-2];
                                                                var ParametrosNodo = nodoListaParametros.getHijos();
                                                                for(var i =0 ; i < ParametrosNodo.length ; i++){
                                                                    var parametroNodo = ParametrosNodo[i];

                                                                    var tipoNodo = parametroNodo.getHijos()[0];
                                                                    var tipoParametro = tipoNodo.getHijos()[0].getTitulo();


                                                                    var idenNodo = parametroNodo.getHijos()[1];
                                                                    var nombreParametro = idenNodo.getHijos()[0].getTitulo();

                                                                    var tmp = new CVariable.Variable(nombreParametro, tipoParametro, "", "");
                                                                    listaParametros.push(tmp);
                                                                }   


                                                                var funci = new CFuncion.Funcion(nombre, tip, "", "");
                                                                funci.setVariables(listaVariables);
                                                                funci.setParametros(listaParametros);
                                                                listaVariables = [];
                                                                listaFunciones.push(funci);
                                                                


                                                                this.$ = meto;
                                                             
break;
case 45:
 
                                                                var funci = new CNodo.Nodo("FUNCION");
                                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                                var varia = new CNodo.Nodo($$[$0-3] + "");
                                                                iden.agregar(varia);
                                                                funci.agregar($$[$0-4]);
                                                                funci.agregar(iden);
                                                                funci.agregar($$[$0]);
                                                                this.$ = funci;
                                                        
break;
case 46:

                                                                var funci = new CNodo.Nodo("FUNCION");
                                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                                var varia = new CNodo.Nodo($$[$0-4] + "");
                                                                iden.agregar(varia);
                                                                funci.agregar($$[$0-5]);
                                                                funci.agregar(iden);
                                                                funci.agregar($$[$0-2]);
                                                                funci.agregar($$[$0]);
                                                                this.$ = funci;
                                                          
break;
case 47:
 
                                                    var lista = $$[$0-2];
                                                    lista.agregar($$[$0]);
                                                    this.$ = lista;
                                                
break;
case 48:
 
                                                    var lista = new CNodo.Nodo("LISTA PARAMETROS");
                                                    lista.agregar($$[$0]);
                                                    this.$ = lista; 
                                                
break;
case 49:
 
                                                    var param = new CNodo.Nodo("PARAMETRO");
                                                    param.agregar($$[$0-1]);

                                                    var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                    var varia = new CNodo.Nodo($$[$0] + "");
                                                    iden.agregar(varia);

                                                    param.agregar(iden);

                                                    this.$ = param;
                                                
break;
case 50:
   
                                            var lista = $$[$0-2];
                                            var expr = new CNodo.Nodo("EXPRESION");
                                            expr.agregar($$[$0]);
                                            lista.agregar(expr);
                                            this.$ = lista;
                                        
break;
case 51:
  
                                            var lista = new CNodo.Nodo("LISTA ARGUMENTOS");
                                            var expr = new CNodo.Nodo("EXPRESION");
                                            expr.agregar($$[$0]);
                                            lista.agregar(expr);
                                            this.$ = lista; 
                                        
break;
case 52:
 
                                                        var llamada = new CNodo.Nodo("LLAMADA");
                                                        var iden =  new CNodo.Nodo("IDENTIFICADOR");
                                                        var varia = new CNodo.Nodo($$[$0-2] + "");
                                                        iden.agregar(varia);
                                                        llamada.agregar(iden);
                                                        this.$ = llamada;
                                                    
break;
case 53:
 
                                                            var llamada = new CNodo.Nodo("LLAMADA");
                                                            var iden =  new CNodo.Nodo("IDENTIFICADOR");
                                                            var varia = new CNodo.Nodo($$[$0-3] + "");
                                                            iden.agregar(varia);
                                                            llamada.agregar(iden);
                                                            llamada.agregar($$[$0-1]);
                                                            this.$ = llamada; 
                                                        
break;
case 54:

                                    var ret = new CNodo.Nodo("RETURN");
                                    var expr = new CNodo.Nodo("EXPRESION");
                                    expr.agregar($$[$0]);
                                    ret.agregar(expr);
                                    this.$ = ret;
                                
break;
case 55:
 
                                    var ret = new CNodo.Nodo("RETURN");
                                    this.$ = ret;
                                
break;
case 56:

                                                                var imp = new CNodo.Nodo("IMPRIMIR");
                                                                var expr = new CNodo.Nodo("EXPRESION");
                                                                expr.agregar($$[$0-1]);
                                                                imp.agregar(expr);
                                                                this.$ = imp;
                                                            
break;
case 57:
 
                                                                var imp = new CNodo.Nodo("IMPRIMIR CON SALTO");
                                                                var expr = new CNodo.Nodo("EXPRESION");
                                                                expr.agregar($$[$0-1]);
                                                                imp.agregar(expr);
                                                                this.$ = imp;
                                                            
break;
case 58:
 
                                                    var senif = $$[$0-2];
                                                    var sif = new CNodo.Nodo("ELSE");

                                                    sif.agregar($$[$0]);

                                                    senif.agregar(sif);
                                                    this.$= senif;
                                                
break;
case 59:
 
                                                    this.$ = $$[$0];
                                                
break;
case 60:
 
                                                                var senif = $$[$0-6];
                                                                var sif = new CNodo.Nodo("ELSE IF");

                                                                var cond = new CNodo.Nodo("CONDICION");  
                                                                var expr = new CNodo.Nodo("EXPRESION");
                                                                expr.agregar($$[$0-2]);
                                                                cond.agregar(expr);

                                                                sif.agregar(cond);
                                                                sif.agregar($$[$0]);

                                                                senif.agregar(sif);
                                                                this.$= senif;
                                                            
break;
case 61:
 
                                                                var senif = new CNodo.Nodo("SENTENCIA IF");
                                                                var sif = new CNodo.Nodo("IF");

                                                                var cond = new CNodo.Nodo("CONDICION");  
                                                                var expr = new CNodo.Nodo("EXPRESION");
                                                                expr.agregar($$[$0-2]);
                                                                cond.agregar(expr);

                                                                sif.agregar(cond);
                                                                sif.agregar($$[$0]);

                                                                senif.agregar(sif);
                                                                this.$= senif;

                                                            
break;
case 62:
 
                                                                var swi = new CNodo.Nodo("SWITCH");

                                                                var cond = new CNodo.Nodo("PARAMETRO");
                                                                var expr = new CNodo.Nodo("EXPRESION");
                                                                expr.agregar($$[$0-4]);
                                                                cond.agregar(expr);

                                                                swi.agregar(cond);
                                                                swi.agregar($$[$0-1]);

                                                                this.$ = swi;
                                                            
break;
case 63:
 
                                var lista = $$[$0-1];
                                lista.agregar($$[$0]);
                                this.$ = lista;
                            
break;
case 64:
 
                                var lista = new CNodo.Nodo("LISTA CASOS");
                                lista.agregar($$[$0]);
                                this.$ = lista;
                            
break;
case 65:
 
                                        var caso = new CNodo.Nodo("CASE");

                                        var cond = new CNodo.Nodo("CONDICION");  
                                        var expr = new CNodo.Nodo("EXPRESION");
                                        expr.agregar($$[$0-2]);
                                        cond.agregar(expr);

                                        caso.agregar(cond);
                                        caso.agregar($$[$0]);
                                        this.$= caso; 
                                    
break;
case 66:
 
                                        var defa = new CNodo.Nodo("DEFAULT");
                                        defa.agregar($$[$0]);
                                        this.$= defa;
                                    
break;
case 67:
 
                                                        var whil = new CNodo.Nodo("WHILE");

                                                        var cond = new CNodo.Nodo("CONDICION");  
                                                        var expr = new CNodo.Nodo("EXPRESION");
                                                        expr.agregar($$[$0-2]);
                                                        cond.agregar(expr);

                                                        whil.agregar(cond);
                                                        whil.agregar($$[$0]);

                                                        this.$ = whil;
                                                        
                                                    
break;
case 68:
 
                                                        var whil = new CNodo.Nodo("DO WHILE");

                                                        var cond = new CNodo.Nodo("CONDICION");  
                                                        var expr = new CNodo.Nodo("EXPRESION");
                                                        expr.agregar($$[$0-1]);
                                                        cond.agregar(expr);

                                                        whil.agregar($$[$0-4]);
                                                        whil.agregar(cond);

                                                        this.$ = whil;
                                                    
break;
case 69:
 
                                                                                            var ciclo = new CNodo.Nodo("FOR");

                                                                                            var cond = new CNodo.Nodo("CONDICION");  
                                                                                            var expr = new CNodo.Nodo("EXPRESION");
                                                                                            expr.agregar($$[$0-4]);
                                                                                            cond.agregar(expr);

                                                                                            ciclo.agregar($$[$0-6]);
                                                                                            ciclo.agregar(cond);
                                                                                            ciclo.agregar($$[$0-2]);
                                                                                            ciclo.agregar($$[$0]);

                                                                                            this.$ = ciclo;
                                                                                        
break;
case 70: case 71:
 
                                var inicio = new CNodo.Nodo("INICIALIZACION");
                                inicio.agregar($$[$0]);
                                this.$ = inicio;
                            
break;
case 72:
 
                                    var actualizacion = new CNodo.Nodo("ACTUALIZACION");
                                    actualizacion.agregar($$[$0]);
                                    this.$ = actualizacion;
                                
break;
case 73:
 
                                            var actualizacion = new CNodo.Nodo("ACTUALIZACION");
                                            var incre = new CNodo.Nodo("INCREMENTO");
                                            var iden = new CNodo.Nodo("IDENTIFICADOR");
                                            var varia = new CNodo.Nodo($$[$0-1] + "");
                                            iden.agregar(varia);
                                            incre.agregar(iden);
                                            actualizacion.agregar(incre);
                                            this.$ = actualizacion;
                                        
break;
case 74:
 
                                            var actualizacion = new CNodo.Nodo("ACTUALIZACION");
                                            var decre = new CNodo.Nodo("DECREMENTO");
                                            var iden = new CNodo.Nodo("IDENTIFICADOR");
                                            var varia = new CNodo.Nodo($$[$0-1] + "");
                                            iden.agregar(varia);
                                            decre.agregar(iden);
                                            actualizacion.agregar(decre);
                                            this.$ = actualizacion;
                                        
break;
case 75:
 
                                    var lista = new CNodo.Nodo("LISTA DE INSTRUCCIONES");
                                    this.$ = lista;
                                
break;
case 76:
 
                                    this.$ = $$[$0-1];
                                
break;
case 77:
 
                            var lista = $$[$0-1];
                            lista.agregar($$[$0]);
                            this.$ = lista;
                        
break;
case 78:
 
                            var lista = new CNodo.Nodo("LISTA DE INSTRUCCIONES");
                            lista.agregar($$[$0]);
                            this.$ = lista;
                        
break;
case 79: case 81: case 84: case 85: case 89: case 95:
 
                                        this.$ = $$[$0-1];
                                    
break;
case 80:
 
                                        this.$ = $$[$0-1];        
                                    
break;
case 82:
 
                                        var bre = new CNodo.Nodo("BREAK");
                                        this.$ = bre;
                                    
break;
case 83:
 
                                        var con = new CNodo.Nodo("CONTINUE");
                                        this.$ = con;
                                    
break;
case 86: case 87: case 88: case 92: case 93: case 94: case 96:
 
                                        this.$ = $$[$0];
                                    
break;
case 90:
 
                                                var incre = new CNodo.Nodo("INCREMENTO");
                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                var varia = new CNodo.Nodo($$[$0-2] + "");
                                                iden.agregar(varia);
                                                incre.agregar(iden);
                                                this.$ = incre;
                                            
break;
case 91:
 
                                                var decre = new CNodo.Nodo("DECREMENTO");
                                                var iden = new CNodo.Nodo("IDENTIFICADOR");
                                                var varia = new CNodo.Nodo($$[$0-2] + "");
                                                iden.agregar(varia);
                                                decre.agregar(iden);
                                                this.$ = decre;
                                            
break;
case 97:
 
                                        var er = new CNodo.Nodo("ERROR");

                                        CErrores.Errores.add(new CNodoError.NodoError("Sintactico","No se esperaba el token: "+yytext,yylineno));

                                        this.$ = er;
                                    
break;
}
},
table: [{2:$V0,3:1,4:2,30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:3,87:$Vh,88:$Vi},{1:[3]},{2:$V0,5:[1,39],30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:40,87:$Vh,88:$Vi},o($Vj,[2,78]),{84:[1,41]},{84:[1,42]},{84:[1,43]},{84:[1,44]},{84:[1,45]},{84:[1,46]},{84:[1,47]},o($Vj,[2,86]),o($Vj,[2,87]),o($Vj,[2,88]),{84:[1,48]},{22:[1,52],31:[1,49],32:[1,50],42:$Vk},o($Vj,[2,92]),o($Vj,[2,93]),o($Vj,[2,94]),{84:[1,53]},o($Vj,[2,96]),o($Vj,[2,97]),{30:[1,55],41:54},{60:[1,56]},{6:57,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,84:[2,55]},{6:69,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{30:[1,70]},{30:[1,71]},o($Vj,[2,59],{66:[1,72]}),{22:[1,73]},{22:[1,74]},{49:75,70:$Vw},{22:[1,77]},{30:[2,31]},{30:[2,32]},{30:[2,33]},{30:[2,34]},{30:[2,35]},{22:[1,78]},{1:[2,1]},o($Vj,[2,77]),o($Vj,[2,79]),o($Vj,[2,80]),o($Vj,[2,81]),o($Vj,[2,82]),o($Vj,[2,83]),o($Vj,[2,84]),o($Vj,[2,85]),o($Vj,[2,89]),{84:[1,79]},{84:[1,80]},{6:81,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:84,7:$Vl,8:$Vm,21:$Vn,22:$Vo,23:[1,82],24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,33:83},o($Vj,[2,95]),{42:[1,85],43:[1,86],84:[2,37]},o($Vx,$Vy,{22:[1,87]}),{61:[1,88]},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,84:[2,54]},{6:103,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:104,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:105,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:106,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($VN,[2,20]),o($VN,[2,21]),o($VN,[2,22]),o($VN,[2,23]),o($VN,[2,24]),o($VN,[2,25]),o($VN,[2,26],{22:[1,109],31:[1,107],32:[1,108]}),{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,84:[2,41]},{49:110,70:$Vw},{22:[1,111]},{49:112,67:[1,113],70:$Vw},{6:114,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:115,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{78:[1,116]},{2:$V0,4:118,30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,72:[1,117],77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:3,87:$Vh,88:$Vi},{30:[1,123],34:122,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:120,44:121,83:119},{6:124,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($Vj,[2,90]),o($Vj,[2,91]),o([23,84],[2,40],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM}),{84:[2,52]},{23:[1,125],43:$VO},o($VP,[2,51],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM}),{6:127,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{30:[1,128]},{23:[1,129],34:132,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,52:130,54:131},{60:[1,133]},{6:134,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:135,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:136,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:137,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:138,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:139,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:140,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:141,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:142,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:143,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:144,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:145,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:146,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:147,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($VN,[2,16]),{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,148]},o($VN,[2,18]),o($VN,[2,19]),o($VN,[2,27]),o($VN,[2,28]),{6:84,7:$Vl,8:$Vm,21:$Vn,22:$Vo,23:[1,149],24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,33:150},o($Vj,[2,42]),{23:[1,151],34:132,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,52:152,54:131},o($Vj,[2,58]),{22:[1,153]},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,154]},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,155]},{22:[1,156]},o($VQ,[2,75]),{2:$V0,30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,72:[1,157],77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:40,87:$Vh,88:$Vi},{84:[1,158]},{84:[2,70]},{84:[2,71]},{30:[1,159],41:54},{42:$Vk},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,160]},{84:[2,53]},{6:161,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,84:[2,36]},o($Vx,[2,38]),{49:162,70:$Vw},{23:[1,163],43:$VR},o($VP,[2,48]),{30:[1,165]},{62:[1,166],63:[1,167]},o($VS,[2,2],{9:$VB,10:$VC,11:$VD,12:$VE}),o($VS,[2,3],{9:$VB,10:$VC,11:$VD,12:$VE}),o($VT,[2,4],{12:$VE}),o($VT,[2,5],{12:$VE}),o($VT,[2,6],{12:$VE}),o($VN,[2,7]),o($VU,[2,8],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE}),o($VU,[2,9],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE}),o($VV,[2,10],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,17:$VJ,18:$VK}),o($VV,[2,11],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,17:$VJ,18:$VK}),o($VU,[2,12],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE}),o($VU,[2,13],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE}),o([19,20,23,43,75,84],[2,14],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK}),o([20,23,43,75,84],[2,15],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL}),o($VN,[2,17]),o($VN,[2,29]),{23:[1,168],43:$VO},{49:169,70:$Vw},{23:[1,170],43:$VR},{6:171,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{70:[1,172]},{49:173,70:$Vw},{6:174,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($VQ,[2,76]),{6:175,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($Vx,$Vy),{49:176,70:$Vw},o($VP,[2,50],{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM}),o($Vj,[2,45]),{49:177,70:$Vw},{34:132,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,54:178},o($VP,[2,49]),{22:[1,179]},{22:[1,180]},o($VN,[2,30]),o($Vj,[2,43]),{49:181,70:$Vw},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,182]},{71:183,73:184,74:$VW,76:$VX},o($Vj,[2,67]),{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,187]},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,84:[1,188]},o($VQ,[2,61]),o($Vj,[2,46]),o($VP,[2,47]),{6:189,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{6:190,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($Vj,[2,44]),{49:191,70:$Vw},{72:[1,192],73:193,74:$VW,76:$VX},o($VY,[2,64]),{6:194,7:$Vl,8:$Vm,21:$Vn,22:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{75:[1,195]},{84:[2,68]},{30:[1,198],44:197,85:196},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,199]},{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,23:[1,200]},o($VQ,[2,60]),o($Vj,[2,62]),o($VY,[2,63]),{7:$Vz,8:$VA,9:$VB,10:$VC,11:$VD,12:$VE,13:$VF,14:$VG,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,75:[1,201]},{2:$V0,4:202,30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:3,87:$Vh,88:$Vi},{23:[1,203]},{23:[2,72]},{31:[1,204],32:[1,205],42:$Vk},{84:[2,56]},{84:[2,57]},{2:$V0,4:206,30:$V1,34:22,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:4,44:5,45:10,46:$V7,47:11,48:$V8,50:12,51:$V9,53:13,55:14,56:9,57:$Va,58:6,59:$Vb,64:16,65:28,67:$Vc,68:17,69:$Vd,77:18,78:$Ve,79:19,80:$Vf,81:20,82:$Vg,86:3,87:$Vh,88:$Vi},o($VY,[2,66],{40:4,44:5,58:6,56:9,45:10,47:11,50:12,53:13,55:14,64:16,68:17,77:18,79:19,81:20,34:22,65:28,86:40,2:$V0,30:$V1,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,46:$V7,48:$V8,51:$V9,57:$Va,59:$Vb,67:$Vc,69:$Vd,78:$Ve,80:$Vf,82:$Vg,87:$Vh,88:$Vi}),{49:207,70:$Vw},{23:[2,73]},{23:[2,74]},o($VY,[2,65],{40:4,44:5,58:6,56:9,45:10,47:11,50:12,53:13,55:14,64:16,68:17,77:18,79:19,81:20,34:22,65:28,86:40,2:$V0,30:$V1,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,46:$V7,48:$V8,51:$V9,57:$Va,59:$Vb,67:$Vc,69:$Vd,78:$Ve,80:$Vf,82:$Vg,87:$Vh,88:$Vi}),o($Vj,[2,69])],
defaultActions: {33:[2,31],34:[2,32],35:[2,33],36:[2,34],37:[2,35],39:[2,1],82:[2,52],120:[2,70],121:[2,71],125:[2,53],187:[2,68],197:[2,72],199:[2,56],200:[2,57],204:[2,73],205:[2,74]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let CPrimitivo=require('../JavaAST/Expresiones/Primitivo');
    let CAritmetica=require('../JavaAST/Expresiones/Aritmetica');
    let CLExpresion=require('../JavaAST/Expresiones/LExpresion');
    let CErrores=require('../JavaAST/Errores');
    let CNodoError=require('../JavaAST/NodoError');
    let CNodo=require('../JavaAST/Nodo');

    let CClase = require('../JavaAST/Clase');
    let CVariable = require('../JavaAST/Variable');
    let CFuncion = require('../JavaAST/Funcion');

    var listaVariables = [];
    var listaClases = [];
    var listaFunciones = [];

    var variableGlobal ;
    var claseGlobal ;
    var tipoGlobal = "";

    function getClases(){
        return listaClases;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:     
break;
case 1:     
break;
case 2:return 35
break;
case 3:return 36
break;
case 4:return 38
break;
case 5:return 39
break;
case 6:return 37
break;
case 7:return 31
break;
case 8:return 32
break;
case 9:return 9
break;
case 10:return 10
break;
case 11:return 8
break;
case 12:return 7
break;
case 13:return 12
break;
case 14:return 11
break;
case 15:return 14
break;
case 16:return 13
break;
case 17:return 15
break;
case 18:return 16
break;
case 19:return 17
break;
case 20:return 18
break;
case 21:return 20
break;
case 22:return 19
break;
case 23:return 21
break;
case 24:return 43
break;
case 25:return 60
break;
case 26:return 84
break;
case 27:return 75
break;
case 28:return 70
break;
case 29:return 72
break;
case 30:return 22
break;
case 31:return 23
break;
case 32:return 42
break;
case 33:return 48
break;
case 34:return 46
break;
case 35:return 67
break;
case 36:return 66
break;
case 37:return 69
break;
case 38:return 74
break;
case 39:return 87
break;
case 40:return 76
break;
case 41:return 82
break;
case 42:return 78
break;
case 43:return 80
break;
case 44:return 88
break;
case 45:return 57
break;
case 46:return 51
break;
case 47:return 59
break;
case 48:return 61
break;
case 49:return 63
break;
case 50:return 62
break;
case 51:return 28
break;
case 52:return 29
break;
case 53:  return 25;  
break;
case 54:  return 24;  
break;
case 55:  return 26;  
break;
case 56:  return 27;  
break;
case 57:  return 30;  
break;
case 58: /*se ignoran*/ 
break;
case 59:  return 5;   
break;
case 60:CErrores.Errores.add(new CNodoError.NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno))
break;
}
},
rules: [/^(?:["\/"]["\/"][^\r\n]*[\n|\r|\r\n|\n\r]?)/,/^(?:\/\*[^\/]\*\/|\/\*\/+\*\/)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:!=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:('[.]'))/,/^(?:[\"][^\"]*[\"])/,/^(?:([a-zñA-ZÑ]|_)([a-zñA-ZÑ]|_|[0-9])*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}